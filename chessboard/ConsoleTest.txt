#include "stdafx.h"
#include <string>
#include <vector>
#include <list>
#include <deque>
#include <forward_list>
#include <algorithm>
#include <functional>
#include <set>
#include <memory>
#include <Windows.h>
#include<conio.h>
#include <math.h>
#include <map>
#include <stdarg.h>
#include <ctype.h>
#include <Windows.h>
#include <iostream>
#include <iomanip>
#include <time.h>

using namespace std;

#define BOARD_SIZE 2
typedef unsigned int BType;


int tile = 0;

void ChessBoard(BType*Board, int tr, int tc, int dr, int dc, int size)
{
	if (size == 1)return;
	int t = tile++;//L形骨牌号

	int s = size / 2;//分割棋盘

	//覆盖左上角
	if (dr < tr + s && dc < tc + s)
		ChessBoard(Board, tr, tc, dr, dc, s);
	else
	{
		*(Board + (tr + s - 1)*BOARD_SIZE + (tc + s - 1)) = t;
		ChessBoard(Board, tr, tc, tr + s - 1, tc + s - 1, s);

	}
	//覆盖右上角
	if (dr<tr + s && dc >= tc + s)
		ChessBoard(Board, tr, tc + s, dr, dc, s);
	else
	{
		*(Board + (tr + s - 1)*BOARD_SIZE + (tc + s)) = t;
		ChessBoard(Board, tr, tc + s, tr + s - 1, tc + s, s);
	}
	//覆盖左下角
	if (dr >= tr + s && dc<tc + s)
		ChessBoard(Board, tr + s, tc, dr, dc, s);
	else{
		*(Board + (tr + s)*BOARD_SIZE + (tc + s - 1)) = t;
		ChessBoard(Board, tr + s, tc, tr + s, tc + s - 1, s);
	}
	//覆盖右下角
	if (dr >= tr + s&&dc >= tc + s)
		ChessBoard(Board, tr + s, tc + s, dr, dc, s);
	else
	{
		*(Board + (tr + s)*BOARD_SIZE + (tc + s)) = t;
		ChessBoard(Board, tr + s, tc + s, tr + s, tc + s, s);
	}

}




//左上角
int FillBoard_Left_Top(BType*Board, int tr,int tc, int size, int start_cout = 0)
{
	int tile = 0;
	*(Board + tr*BOARD_SIZE + tc) = start_cout;
	if (size == 1)return start_cout;
	int n = 1;
	int i;
	int j;
	int k = 0;
	tile = n;
	int max;
	int n_tr;
	int n_tc;

	while (n != size)
	{
		n_tr = tr + n;
		n_tc = tc + n;
		//下移
		for (i = tr; i<n_tr; i++)
		{
			for (j = tc; j<n_tc; j++)
			{
				*(Board + (i + n)*BOARD_SIZE + j + n) = *(Board + i*BOARD_SIZE + j) + tile;

			}
		}

		//镜像上
		for (i = tr + 2 * n - 1; i>n_tr -1; i--)
		{
			for (j = tc + 2 * n - 1; j>n_tc -1; j--)
			{
				if (i != n_tr || j != n_tc)
				{
					*(Board + (i - (2 * (i - n_tr) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j) + max;
				}
				else
				{
					//最后一格的镜像不增加
					*(Board + (i - (2 * (i - n_tr) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

		//镜像左
		for (i = tr + 2 * n - 1; i>n_tr-1; i--)
		{
			for (j = tc + 2 * n - 1; j>n_tc-1; j--)
			{
				if (i != n_tr || j != n_tc)
				{
					*(Board + i*BOARD_SIZE + (j - (2 * (j - n_tc) + 1))) = *(Board + i*BOARD_SIZE + j) + 2 * max;

				}
				else
				{
					//最后一格的镜像不增加
					*(Board + i*BOARD_SIZE + (j - (2 * (j - n_tc) + 1))) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

		
		max = ((4 << 2*k) - 1) / 3;//获取最大值
		tile = max + 1;
		n = n * 2;
		k++;

	}

	return max;
}

//右上角
int FillBoard_Right_Top(BType*Board, int tr, int tc, int size, int start_cout = 0)
{
	
	int tile = 0;

	*(Board + tr*BOARD_SIZE + tc) = start_cout;
	if (size == 1)return start_cout;
	int n = 1;
	int i;
	int j;
	int k = 0;
	tile = n;
	int max;
	int n_tr;
	int n_tc;

	while (n != size)
	{
		n_tr = tr + n;
		n_tc = tc - n;
		//下移
		for (i = tr; i<n_tr; i++)
		{
			for (j = tc; j>n_tc; j--)
			{
				*(Board + (i + n)*BOARD_SIZE + j - n) = *(Board + i*BOARD_SIZE + j) + tile;

			}
		}

		//镜像上
		for (i = tr + 2 * n - 1; i>n_tr - 1; i--)
		{
			for (j = tc - 2 * n + 1; j< n_tc + 1; j++)
			{
				if (i != n_tr || j != n_tc)
				{
					*(Board + (i - (2 * (i - n_tr) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j) + max;
				}
				else
				{
					//最后一格的镜像不增加
					*(Board + (i - (2 * (i - n_tr) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

		//镜像左
		for (i = tr + 2 * n - 1; i>n_tr - 1; i--)
		{
			for (j = tc - 2 * n + 1; j<n_tc + 1; j++)
			{
				if (i != n_tr || j != n_tc)
				{
					*(Board + i*BOARD_SIZE + (j + (2 * (n_tc-j) + 1))) = *(Board + i*BOARD_SIZE + j) + 2 * max;

				}
				else
				{
					//最后一格的镜像不增加
					*(Board + i*BOARD_SIZE + (j + (2 * (n_tc -j) + 1))) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}


		max = ((4 << 2 * k) - 1) / 3;//获取最大值
		tile = max + 1;
		n = n * 2;
		k++;

	}
	return max;

}

//左下角
int FillBoard_Left_Down(BType*Board, int tr, int tc, int size, int start_cout = 0)
{
	
	int tile = 0;

	*(Board + tr*BOARD_SIZE + tc) = start_cout;
	if (size == 1)return start_cout;
	int n = 1;
	int i;
	int j;
	int k = 0;
	tile = n;
	int max;
	int n_tr;
	int n_tc;

	while (n != size)
	{
		n_tr = tr - n;
		n_tc = tc + n;
		//下移
		for (i = tr; i>n_tr; i--)
		{
			for (j = tc; j<n_tc; j++)
			{
				*(Board + (i - n)*BOARD_SIZE + j + n) = *(Board + i*BOARD_SIZE + j) + tile;

			}
		}

		//镜像上
		for (i = tr - 2 * n + 1; i<n_tr + 1; i++)
		{
			for (j = tc + 2 * n - 1; j>n_tc - 1; j--)
			{
				if (i != n_tr || j != n_tc)
				{
					*(Board + (i + (2 * (n_tr - i) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j) + max;
				}
				else
				{
					//最后一格的镜像不增加
					*(Board + (i + (2 * (n_tr - i) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

		//镜像左
		for (i = tr - 2 * n + 1; i<n_tr + 1; i++)
		{
			for (j = tc + 2 * n - 1; j>n_tc - 1; j--)
			{
				if (i != n_tr || j != n_tc)
				{
					*(Board + i*BOARD_SIZE + (j - (2 * (j - n_tc) + 1))) = *(Board + i*BOARD_SIZE + j) + 2 * max;

				}
				else
				{
					//最后一格的镜像不增加
					*(Board + i*BOARD_SIZE + (j - (2 * (j - n_tc) + 1))) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}


		max = ((4 << 2 * k) - 1) / 3;//获取最大值
		tile = max + 1;
		n = n * 2;
		k++;

	}

	return max;
}


//右下角
int FillBoard_Right_Down(BType*Board, int tr, int tc, int size, int start_cout = 0)
{
	

	int tile = 0;

	*(Board + tr*BOARD_SIZE + tc) = start_cout;
	if (size == 1)return start_cout;

	int n = 1;
	int i;
	int j;
	int k = 0;
	tile = n;
	int max;
	int n_tr;
	int n_tc;

	while (n != size)
	{
		n_tr = tr - n;
		n_tc = tc - n;
		//下移
		for (i = tr; i>n_tr; i--)
		{
			for (j = tc; j>n_tc; j--)
			{
				*(Board + (i - n)*BOARD_SIZE + j - n) = *(Board + i*BOARD_SIZE + j) + tile;

			}
		}

		//镜像上
		for (i = tr - 2 * n + 1; i<n_tr + 1; i++)
		{
			for (j = tc - 2 * n + 1; j<n_tc + 1; j++)
			{
				if (i != n_tr || j != n_tc)
				{
					*(Board + (i + (2 * (n_tr - i) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j) + max;
				}
				else
				{
					//最后一格的镜像不增加
					*(Board + (i + (2 * (n_tr - i) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

		//镜像左
		for (i = tr - 2 * n + 1; i<n_tr + 1; i++)
		{
			for (j = tc - 2 * n + 1; j<n_tc + 1; j++)
			{
				if (i != n_tr || j != n_tc)
				{
					*(Board + i*BOARD_SIZE + (j + (2 * (n_tc - j) + 1))) = *(Board + i*BOARD_SIZE + j) + 2 * max;

				}
				else
				{
					//最后一格的镜像不增加
					*(Board + i*BOARD_SIZE + (j + (2 * (n_tc - j) + 1))) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

		max = ((4 << 2 * k) - 1) / 3;//获取最大值
		tile = max + 1;
		n = n * 2;
		k++;

	}
	return max;
}


int  max_count = 0;

void ChessBoardNew(BType*Board, int tr, int tc, int dr, int dc, int size)
{
	if (size == 1)return;

	int s = size / 2;//分割棋盘
	int i, j;
	int max;

	int n_tr = tr + s;
	int n_tc = tc + s;
	//覆盖左上角
	if (dr < tr + s && dc < tc + s)
	{
	
		//建立右下角镜像
		max = FillBoard_Left_Top(Board, n_tr, n_tc, s, max_count);
		//镜像上
		for (i = tr + 2 * s - 1; i>n_tr - 1; i--)
		{
			for (j = tc + 2 * s - 1; j>n_tc - 1; j--)
			{
				if (i != n_tr || j != n_tc)
				{
					*(Board + (i - (2 * (i - n_tr) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j) + max;
				}
				else
				{
					//最后一格的镜像不增加
					*(Board + (i - (2 * (i - n_tr) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

		//镜像左
		for (i = tr + 2 * s - 1; i>n_tr - 1; i--)
		{
			for (j = tc + 2 * s - 1; j>n_tc - 1; j--)
			{
				if (i != n_tr || j != n_tc)
				{
					*(Board + i*BOARD_SIZE + (j - (2 * (j - n_tc) + 1))) = *(Board + i*BOARD_SIZE + j) + 2 * max;

				}
				else
				{
					//最后一格的镜像不增加
					*(Board + i*BOARD_SIZE + (j - (2 * (j - n_tc) + 1))) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

		max_count = max_count + 3*max + 1;
		//特殊方格在此方格中
		ChessBoardNew(Board, tr, tc, dr, dc, s);
		
		

	}
	
	//覆盖右上角
	if (dr < tr + s && dc >= tc + s)
	{
		//建立左下角镜像
		max = FillBoard_Right_Top(Board, n_tr, n_tc - 1, s, max_count);
		
		//镜像上
		for (i = tr + 2 * s - 1; i>n_tr - 1; i--)
		{
			for (j = tc; j< n_tc; j++)
			{
				if (i != n_tr || j != n_tc-1)
				{
					*(Board + (i - (2 * (i - n_tr) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j) + max;
				}
				else
				{
					//最后一格的镜像不增加
					*(Board + (i - (2 * (i - n_tr) + 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

	
		//镜像左
		for (i = tr + 2 * s - 1; i>n_tr - 1; i--)
		{
			for (j = tc; j<n_tc; j++)
			{
				if (i != n_tr || j != n_tc-1)
				{
					*(Board + i*BOARD_SIZE + (j + (2 * (n_tc - j) - 1))) = *(Board + i*BOARD_SIZE + j) + 2 * max;

				}
				else
				{
					//最后一格的镜像不增加
					*(Board + i*BOARD_SIZE + (j + (2 * (n_tc - j) - 1))) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}
		
		max_count = max_count + 3 * max + 1;
		//特殊方格在此方格中
		ChessBoardNew(Board, tr, tc + s, dr, dc, s);
		
	}
	
	//覆盖左下角
	if (dr >= tr + s && dc < tc + s)
	{

		//建立右上角镜像,tr,tc为方格左上角,基于tr,tc做为左上角建立
		max = FillBoard_Left_Down(Board, n_tr - 1, n_tc, s, max_count);//基于缺口角建立

		//镜像上
		for (i = tr; i<n_tr; i++)
		{
			for (j = tc + 2 * s - 1; j>n_tc - 1; j--)
			{
				if (i != n_tr-1 || j != n_tc)
				{
					*(Board + (i + (2 * (n_tr - i) - 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j) + max;
				}
				else
				{
					//最后一格的镜像不增加
					*(Board + (i + (2 * (n_tr - i) - 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}
		
		//镜像左
		for (i = tr; i<n_tr; i++)
		{
			for (j = tc + 2 * s - 1; j>n_tc - 1; j--)
			{
				if (i != n_tr-1 || j != n_tc)
				{
					*(Board + i*BOARD_SIZE + (j - (2 * (j - n_tc) + 1))) = *(Board + i*BOARD_SIZE + j) + 2 * max;

				}
				else
				{
					//最后一格的镜像不增加
					*(Board + i*BOARD_SIZE + (j - (2 * (j - n_tc) + 1))) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}
		
		max_count = max_count + 3 * max + 1;

        ChessBoardNew(Board, tr + s, tc, dr, dc, s);

	}
	
	//覆盖右下角
	if (dr >= tr + s&&dc >= tc + s)
	{
		max = FillBoard_Right_Down(Board, n_tr - 1, n_tc - 1, s, max_count);//基于缺口角建立

		//镜像上,顺时针
		for (i = tr; i<n_tr; i++)
		{
			for (j = tc; j<n_tc; j++)
			{
				if (i != n_tr-1 || j != n_tc-1)
				{
					*(Board + (i + (2 * (n_tr - i) - 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j) + max;
				}
				else
				{
					//最后一格的镜像不增加
					*(Board + (i + (2 * (n_tr - i) - 1))*BOARD_SIZE + j) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

		
		//镜像左
		for (i = tr; i<n_tr; i++)
		{
			for (j = tc; j<n_tc; j++)
			{
				if (i != n_tr-1 || j != n_tc-1)
				{
					*(Board + i*BOARD_SIZE + (j + (2 * (n_tc - j) - 1))) = *(Board + i*BOARD_SIZE + j) + 2 * max;

				}
				else
				{
					//最后一格的镜像不增加
					*(Board + i*BOARD_SIZE + (j + (2 * (n_tc - j) - 1))) = *(Board + i*BOARD_SIZE + j);
				}

			}
		}

		max_count = max_count + 3 * max + 1;

	    ChessBoardNew(Board, tr + s, tc + s, dr, dc, s);
	}
	


}

int _tmain(int argc, _TCHAR* argv[])
{
	BType *Board = (BType*)malloc(BOARD_SIZE*BOARD_SIZE*sizeof(BType));
	memset(Board, 0, BOARD_SIZE*BOARD_SIZE*sizeof(BType));
	BType *Board1 = (BType*)malloc(BOARD_SIZE*BOARD_SIZE*sizeof(BType));
	memset(Board1, 0, BOARD_SIZE*BOARD_SIZE*sizeof(BType));

	LARGE_INTEGER nFreq;

	LARGE_INTEGER nBeginTime;
	LARGE_INTEGER nEndTime;
	LARGE_INTEGER nEndTime1;

	int max = 0;
	double time1, time2;

	QueryPerformanceFrequency(&nFreq);
	QueryPerformanceCounter(&nBeginTime);
	ChessBoardNew(Board, 0, 0, 1, 1, BOARD_SIZE/*BOARD_SIZE*/);//计算使用时间
	//max = FillBoard_Left_Top(Board, 0, 0,BOARD_SIZE, 0);//不影响max返回
	//max = FillBoard_Right_Top(Board, 0, 7, BOARD_SIZE, 0);//不影响max返回
	//max = FillBoard_Left_Down(Board, 7, 0, BOARD_SIZE, 0);//不影响max返回
	//max = FillBoard_Right_Down(Board, 7, 7, BOARD_SIZE, 0);//不影响max返回
	QueryPerformanceCounter(&nEndTime);
	ChessBoard(Board1, 0, 0, 1, 1, BOARD_SIZE/*BOARD_SIZE*/);//计算使用时间
	QueryPerformanceCounter(&nEndTime1);

	time1 = (double)((nEndTime.QuadPart - nBeginTime.QuadPart)) / (double)nFreq.QuadPart;
	time2 = (double)((nEndTime1.QuadPart - nEndTime.QuadPart)) / (double)nFreq.QuadPart;

	
	for (int i = 0; i<BOARD_SIZE; i++)
	{
		for (int j = 0; j<BOARD_SIZE; j++)
		{
			cout << setw(3) << int(*(Board + i*BOARD_SIZE + j)) << ",";
		}
		cout << endl;
	}

	cout << "/////////////////////////////////////////////////////" << endl;

	for (int i = 0; i<BOARD_SIZE; i++)
	{
		for (int j = 0; j<BOARD_SIZE; j++)
		{
			cout << setw(3) << int(*(Board1 + i*BOARD_SIZE + j)) << ",";
		}
		cout << endl;
	}
	
	cout << "Size:" << BOARD_SIZE << endl;
	cout << "ChessBoardNew:" << time1 << endl;
	cout << "ChessBoard:" << time2 << endl;
	system("pause");

	return 0;
}
